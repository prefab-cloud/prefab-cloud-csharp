// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/prefab.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Prefab {

  /// <summary>Holder for reflection information generated from proto/prefab.proto</summary>
  public static partial class PrefabReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/prefab.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PrefabReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90by9wcmVmYWIucHJvdG8SBnByZWZhYiI/ChRDb25maWdTZXJ2aWNl",
            "UG9pbnRlchISCgphY2NvdW50X2lkGAEgASgDEhMKC3N0YXJ0X2F0X2lkGAIg",
            "ASgDIkoKC0NvbmZpZ0RlbHRhEgoKAmlkGAIgASgDEgsKA2tleRgDIAEoCRIi",
            "CgV2YWx1ZRgEIAEoCzITLnByZWZhYi5Db25maWdWYWx1ZSKWAQoLQ29uZmln",
            "VmFsdWUSDQoDaW50GAEgASgDSAASEAoGc3RyaW5nGAIgASgJSAASDwoFYnl0",
            "ZXMYAyABKAxIABIQCgZkb3VibGUYBCABKAFIABIOCgRib29sGAUgASgISAAS",
            "KwoMZmVhdHVyZV9mbGFnGAYgASgLMhMucHJlZmFiLkZlYXR1cmVGbGFnSABC",
            "BgoEdHlwZSIzCgxDb25maWdEZWx0YXMSIwoGZGVsdGFzGAEgAygLMhMucHJl",
            "ZmFiLkNvbmZpZ0RlbHRhImQKDVVwc2VydFJlcXVlc3QSEgoKYWNjb3VudF9p",
            "ZBgBIAEoAxIpCgxjb25maWdfZGVsdGEYAiABKAsyEy5wcmVmYWIuQ29uZmln",
            "RGVsdGESFAoMcHJldmlvdXNfa2V5GAMgASgJItsDCg1MaW1pdFJlc3BvbnNl",
            "Eg4KBnBhc3NlZBgBIAEoCBISCgpleHBpcmVzX2F0GAIgASgDEhYKDmVuZm9y",
            "Y2VkX2dyb3VwGAMgASgJEhYKDmN1cnJlbnRfYnVja2V0GAQgASgDEhQKDHBv",
            "bGljeV9ncm91cBgFIAEoCRI7Cgtwb2xpY3lfbmFtZRgGIAEoDjImLnByZWZh",
            "Yi5MaW1pdFJlc3BvbnNlLkxpbWl0UG9saWN5TmFtZXMSFAoMcG9saWN5X2xp",
            "bWl0GAcgASgFEg4KBmFtb3VudBgIIAEoAxIWCg5saW1pdF9yZXNldF9hdBgJ",
            "IAEoAxI5CgxzYWZldHlfbGV2ZWwYCiABKA4yIy5wcmVmYWIuTGltaXREZWZp",
            "bml0aW9uLlNhZmV0eUxldmVsIqkBChBMaW1pdFBvbGljeU5hbWVzEgsKB05P",
            "VF9TRVQQABIUChBTRUNPTkRMWV9ST0xMSU5HEAESFAoQTUlOVVRFTFlfUk9M",
            "TElORxADEhIKDkhPVVJMWV9ST0xMSU5HEAUSEQoNREFJTFlfUk9MTElORxAH",
            "EhMKD01PTlRITFlfUk9MTElORxAIEgwKCElORklOSVRFEAkSEgoOWUVBUkxZ",
            "X1JPTExJTkcQCiLeAQoMTGltaXRSZXF1ZXN0EhIKCmFjY291bnRfaWQYASAB",
            "KAMSFgoOYWNxdWlyZV9hbW91bnQYAiABKAUSDgoGZ3JvdXBzGAMgAygJEjoK",
            "DmxpbWl0X2NvbWJpbmVyGAQgASgOMiIucHJlZmFiLkxpbWl0UmVxdWVzdC5M",
            "aW1pdENvbWJpbmVyEh4KFmFsbG93X3BhcnRpYWxfcmVzcG9uc2UYBSABKAgi",
            "NgoNTGltaXRDb21iaW5lchILCgdOT1RfU0VUEAASCwoHTUlOSU1VTRABEgsK",
            "B01BWElNVU0QAiJACgtGZWF0dXJlRmxhZxIPCgdmZWF0dXJlGAIgASgJEgsK",
            "A3BjdBgDIAEoARITCgt3aGl0ZWxpc3RlZBgEIAMoCSK3AgoPTGltaXREZWZp",
            "bml0aW9uEg0KBWdyb3VwGAEgASgJEjsKC3BvbGljeV9uYW1lGAIgASgOMiYu",
            "cHJlZmFiLkxpbWl0UmVzcG9uc2UuTGltaXRQb2xpY3lOYW1lcxINCgVsaW1p",
            "dBgDIAEoBRINCgVidXJzdBgEIAEoBRISCgphY2NvdW50X2lkGAUgASgDEhUK",
            "DWxhc3RfbW9kaWZpZWQYBiABKAMSEgoKcmV0dXJuYWJsZRgHIAEoCBI5Cgxz",
            "YWZldHlfbGV2ZWwYCCABKA4yIy5wcmVmYWIuTGltaXREZWZpbml0aW9uLlNh",
            "ZmV0eUxldmVsIkAKC1NhZmV0eUxldmVsEgsKB05PVF9TRVQQABISCg5MNF9C",
            "RVNUX0VGRk9SVBAEEhAKDEw1X0JPTUJQUk9PRhAFIkAKEExpbWl0RGVmaW5p",
            "dGlvbnMSLAoLZGVmaW5pdGlvbnMYASADKAsyFy5wcmVmYWIuTGltaXREZWZp",
            "bml0aW9uIkgKDEZlYXR1cmVGbGFncxIiCgVmbGFncxgBIAMoCzITLnByZWZh",
            "Yi5GZWF0dXJlRmxhZxIUCgxjYWNoZV9leHBpcnkYAiABKAMiigEKD0J1ZmZl",
            "cmVkUmVxdWVzdBISCgphY2NvdW50X2lkGAEgASgDEg4KBm1ldGhvZBgCIAEo",
            "CRILCgN1cmkYAyABKAkSDAoEYm9keRgEIAEoCRIUCgxsaW1pdF9ncm91cHMY",
            "BSADKAkSFAoMY29udGVudF90eXBlGAYgASgJEgwKBGZpZm8YByABKAgilAEK",
            "DEJhdGNoUmVxdWVzdBISCgphY2NvdW50X2lkGAEgASgDEg4KBm1ldGhvZBgC",
            "IAEoCRILCgN1cmkYAyABKAkSDAoEYm9keRgEIAEoCRIUCgxsaW1pdF9ncm91",
            "cHMYBSADKAkSFgoOYmF0Y2hfdGVtcGxhdGUYBiABKAkSFwoPYmF0Y2hfc2Vw",
            "YXJhdG9yGAcgASgJKkcKCU9uRmFpbHVyZRILCgdOT1RfU0VUEAASEAoMTE9H",
            "X0FORF9QQVNTEAESEAoMTE9HX0FORF9GQUlMEAISCQoFVEhST1cQAzJPChBS",
            "YXRlTGltaXRTZXJ2aWNlEjsKCkxpbWl0Q2hlY2sSFC5wcmVmYWIuTGltaXRS",
            "ZXF1ZXN0GhUucHJlZmFiLkxpbWl0UmVzcG9uc2UiADKVAQoNQ29uZmlnU2Vy",
            "dmljZRJDCglHZXRDb25maWcSHC5wcmVmYWIuQ29uZmlnU2VydmljZVBvaW50",
            "ZXIaFC5wcmVmYWIuQ29uZmlnRGVsdGFzIgAwARI/CgZVcHNlcnQSFS5wcmVm",
            "YWIuVXBzZXJ0UmVxdWVzdBocLnByZWZhYi5Db25maWdTZXJ2aWNlUG9pbnRl",
            "ciIAQh0KE2Nsb3VkLnByZWZhYi5kb21haW5CBlByZWZhYmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Prefab.OnFailure), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.ConfigServicePointer), global::Prefab.ConfigServicePointer.Parser, new[]{ "AccountId", "StartAtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.ConfigDelta), global::Prefab.ConfigDelta.Parser, new[]{ "Id", "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.ConfigValue), global::Prefab.ConfigValue.Parser, new[]{ "Int", "String", "Bytes", "Double", "Bool", "FeatureFlag" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.ConfigDeltas), global::Prefab.ConfigDeltas.Parser, new[]{ "Deltas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.UpsertRequest), global::Prefab.UpsertRequest.Parser, new[]{ "AccountId", "ConfigDelta", "PreviousKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.LimitResponse), global::Prefab.LimitResponse.Parser, new[]{ "Passed", "ExpiresAt", "EnforcedGroup", "CurrentBucket", "PolicyGroup", "PolicyName", "PolicyLimit", "Amount", "LimitResetAt", "SafetyLevel" }, null, new[]{ typeof(global::Prefab.LimitResponse.Types.LimitPolicyNames) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.LimitRequest), global::Prefab.LimitRequest.Parser, new[]{ "AccountId", "AcquireAmount", "Groups", "LimitCombiner", "AllowPartialResponse" }, null, new[]{ typeof(global::Prefab.LimitRequest.Types.LimitCombiner) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.FeatureFlag), global::Prefab.FeatureFlag.Parser, new[]{ "Feature", "Pct", "Whitelisted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.LimitDefinition), global::Prefab.LimitDefinition.Parser, new[]{ "Group", "PolicyName", "Limit", "Burst", "AccountId", "LastModified", "Returnable", "SafetyLevel" }, null, new[]{ typeof(global::Prefab.LimitDefinition.Types.SafetyLevel) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.LimitDefinitions), global::Prefab.LimitDefinitions.Parser, new[]{ "Definitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.FeatureFlags), global::Prefab.FeatureFlags.Parser, new[]{ "Flags", "CacheExpiry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.BufferedRequest), global::Prefab.BufferedRequest.Parser, new[]{ "AccountId", "Method", "Uri", "Body", "LimitGroups", "ContentType", "Fifo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prefab.BatchRequest), global::Prefab.BatchRequest.Parser, new[]{ "AccountId", "Method", "Uri", "Body", "LimitGroups", "BatchTemplate", "BatchSeparator" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum OnFailure {
    [pbr::OriginalName("NOT_SET")] NotSet = 0,
    [pbr::OriginalName("LOG_AND_PASS")] LogAndPass = 1,
    [pbr::OriginalName("LOG_AND_FAIL")] LogAndFail = 2,
    [pbr::OriginalName("THROW")] Throw = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ConfigServicePointer : pb::IMessage<ConfigServicePointer> {
    private static readonly pb::MessageParser<ConfigServicePointer> _parser = new pb::MessageParser<ConfigServicePointer>(() => new ConfigServicePointer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigServicePointer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigServicePointer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigServicePointer(ConfigServicePointer other) : this() {
      accountId_ = other.accountId_;
      startAtId_ = other.startAtId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigServicePointer Clone() {
      return new ConfigServicePointer(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "start_at_id" field.</summary>
    public const int StartAtIdFieldNumber = 2;
    private long startAtId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartAtId {
      get { return startAtId_; }
      set {
        startAtId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigServicePointer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigServicePointer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (StartAtId != other.StartAtId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (StartAtId != 0L) hash ^= StartAtId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (StartAtId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartAtId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (StartAtId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartAtId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigServicePointer other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.StartAtId != 0L) {
        StartAtId = other.StartAtId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 16: {
            StartAtId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigDelta : pb::IMessage<ConfigDelta> {
    private static readonly pb::MessageParser<ConfigDelta> _parser = new pb::MessageParser<ConfigDelta>(() => new ConfigDelta());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigDelta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigDelta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigDelta(ConfigDelta other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigDelta Clone() {
      return new ConfigDelta(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private global::Prefab.ConfigValue value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prefab.ConfigValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigDelta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigDelta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigDelta other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Prefab.ConfigValue();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 26: {
            Key = input.ReadString();
            break;
          }
          case 34: {
            if (value_ == null) {
              value_ = new global::Prefab.ConfigValue();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigValue : pb::IMessage<ConfigValue> {
    private static readonly pb::MessageParser<ConfigValue> _parser = new pb::MessageParser<ConfigValue>(() => new ConfigValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigValue(ConfigValue other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Int:
          Int = other.Int;
          break;
        case TypeOneofCase.String:
          String = other.String;
          break;
        case TypeOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case TypeOneofCase.Double:
          Double = other.Double;
          break;
        case TypeOneofCase.Bool:
          Bool = other.Bool;
          break;
        case TypeOneofCase.FeatureFlag:
          FeatureFlag = other.FeatureFlag.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigValue Clone() {
      return new ConfigValue(this);
    }

    /// <summary>Field number for the "int" field.</summary>
    public const int IntFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int {
      get { return typeCase_ == TypeOneofCase.Int ? (long) type_ : 0L; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.Int;
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string String {
      get { return typeCase_ == TypeOneofCase.String ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.String;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return typeCase_ == TypeOneofCase.Bytes ? (pb::ByteString) type_ : pb::ByteString.Empty; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "double" field.</summary>
    public const int DoubleFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Double {
      get { return typeCase_ == TypeOneofCase.Double ? (double) type_ : 0D; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.Double;
      }
    }

    /// <summary>Field number for the "bool" field.</summary>
    public const int BoolFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool {
      get { return typeCase_ == TypeOneofCase.Bool ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.Bool;
      }
    }

    /// <summary>Field number for the "feature_flag" field.</summary>
    public const int FeatureFlagFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prefab.FeatureFlag FeatureFlag {
      get { return typeCase_ == TypeOneofCase.FeatureFlag ? (global::Prefab.FeatureFlag) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.FeatureFlag;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Int = 1,
      String = 2,
      Bytes = 3,
      Double = 4,
      Bool = 5,
      FeatureFlag = 6,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Int != other.Int) return false;
      if (String != other.String) return false;
      if (Bytes != other.Bytes) return false;
      if (Double != other.Double) return false;
      if (Bool != other.Bool) return false;
      if (!object.Equals(FeatureFlag, other.FeatureFlag)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Int) hash ^= Int.GetHashCode();
      if (typeCase_ == TypeOneofCase.String) hash ^= String.GetHashCode();
      if (typeCase_ == TypeOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (typeCase_ == TypeOneofCase.Double) hash ^= Double.GetHashCode();
      if (typeCase_ == TypeOneofCase.Bool) hash ^= Bool.GetHashCode();
      if (typeCase_ == TypeOneofCase.FeatureFlag) hash ^= FeatureFlag.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Int) {
        output.WriteRawTag(8);
        output.WriteInt64(Int);
      }
      if (typeCase_ == TypeOneofCase.String) {
        output.WriteRawTag(18);
        output.WriteString(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        output.WriteRawTag(26);
        output.WriteBytes(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        output.WriteRawTag(33);
        output.WriteDouble(Double);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        output.WriteRawTag(40);
        output.WriteBool(Bool);
      }
      if (typeCase_ == TypeOneofCase.FeatureFlag) {
        output.WriteRawTag(50);
        output.WriteMessage(FeatureFlag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Int) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int);
      }
      if (typeCase_ == TypeOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        size += 1 + 8;
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.FeatureFlag) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureFlag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigValue other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Int:
          Int = other.Int;
          break;
        case TypeOneofCase.String:
          String = other.String;
          break;
        case TypeOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case TypeOneofCase.Double:
          Double = other.Double;
          break;
        case TypeOneofCase.Bool:
          Bool = other.Bool;
          break;
        case TypeOneofCase.FeatureFlag:
          if (FeatureFlag == null) {
            FeatureFlag = new global::Prefab.FeatureFlag();
          }
          FeatureFlag.MergeFrom(other.FeatureFlag);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Int = input.ReadInt64();
            break;
          }
          case 18: {
            String = input.ReadString();
            break;
          }
          case 26: {
            Bytes = input.ReadBytes();
            break;
          }
          case 33: {
            Double = input.ReadDouble();
            break;
          }
          case 40: {
            Bool = input.ReadBool();
            break;
          }
          case 50: {
            global::Prefab.FeatureFlag subBuilder = new global::Prefab.FeatureFlag();
            if (typeCase_ == TypeOneofCase.FeatureFlag) {
              subBuilder.MergeFrom(FeatureFlag);
            }
            input.ReadMessage(subBuilder);
            FeatureFlag = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigDeltas : pb::IMessage<ConfigDeltas> {
    private static readonly pb::MessageParser<ConfigDeltas> _parser = new pb::MessageParser<ConfigDeltas>(() => new ConfigDeltas());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigDeltas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigDeltas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigDeltas(ConfigDeltas other) : this() {
      deltas_ = other.deltas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigDeltas Clone() {
      return new ConfigDeltas(this);
    }

    /// <summary>Field number for the "deltas" field.</summary>
    public const int DeltasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Prefab.ConfigDelta> _repeated_deltas_codec
        = pb::FieldCodec.ForMessage(10, global::Prefab.ConfigDelta.Parser);
    private readonly pbc::RepeatedField<global::Prefab.ConfigDelta> deltas_ = new pbc::RepeatedField<global::Prefab.ConfigDelta>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prefab.ConfigDelta> Deltas {
      get { return deltas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigDeltas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigDeltas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deltas_.Equals(other.deltas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deltas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deltas_.WriteTo(output, _repeated_deltas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deltas_.CalculateSize(_repeated_deltas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigDeltas other) {
      if (other == null) {
        return;
      }
      deltas_.Add(other.deltas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            deltas_.AddEntriesFrom(input, _repeated_deltas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpsertRequest : pb::IMessage<UpsertRequest> {
    private static readonly pb::MessageParser<UpsertRequest> _parser = new pb::MessageParser<UpsertRequest>(() => new UpsertRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpsertRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertRequest(UpsertRequest other) : this() {
      accountId_ = other.accountId_;
      ConfigDelta = other.configDelta_ != null ? other.ConfigDelta.Clone() : null;
      previousKey_ = other.previousKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertRequest Clone() {
      return new UpsertRequest(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "config_delta" field.</summary>
    public const int ConfigDeltaFieldNumber = 2;
    private global::Prefab.ConfigDelta configDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prefab.ConfigDelta ConfigDelta {
      get { return configDelta_; }
      set {
        configDelta_ = value;
      }
    }

    /// <summary>Field number for the "previous_key" field.</summary>
    public const int PreviousKeyFieldNumber = 3;
    private string previousKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreviousKey {
      get { return previousKey_; }
      set {
        previousKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpsertRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpsertRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (!object.Equals(ConfigDelta, other.ConfigDelta)) return false;
      if (PreviousKey != other.PreviousKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (configDelta_ != null) hash ^= ConfigDelta.GetHashCode();
      if (PreviousKey.Length != 0) hash ^= PreviousKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (configDelta_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConfigDelta);
      }
      if (PreviousKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PreviousKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (configDelta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigDelta);
      }
      if (PreviousKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreviousKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpsertRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.configDelta_ != null) {
        if (configDelta_ == null) {
          configDelta_ = new global::Prefab.ConfigDelta();
        }
        ConfigDelta.MergeFrom(other.ConfigDelta);
      }
      if (other.PreviousKey.Length != 0) {
        PreviousKey = other.PreviousKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 18: {
            if (configDelta_ == null) {
              configDelta_ = new global::Prefab.ConfigDelta();
            }
            input.ReadMessage(configDelta_);
            break;
          }
          case 26: {
            PreviousKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LimitResponse : pb::IMessage<LimitResponse> {
    private static readonly pb::MessageParser<LimitResponse> _parser = new pb::MessageParser<LimitResponse>(() => new LimitResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LimitResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitResponse(LimitResponse other) : this() {
      passed_ = other.passed_;
      expiresAt_ = other.expiresAt_;
      enforcedGroup_ = other.enforcedGroup_;
      currentBucket_ = other.currentBucket_;
      policyGroup_ = other.policyGroup_;
      policyName_ = other.policyName_;
      policyLimit_ = other.policyLimit_;
      amount_ = other.amount_;
      limitResetAt_ = other.limitResetAt_;
      safetyLevel_ = other.safetyLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitResponse Clone() {
      return new LimitResponse(this);
    }

    /// <summary>Field number for the "passed" field.</summary>
    public const int PassedFieldNumber = 1;
    private bool passed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Passed {
      get { return passed_; }
      set {
        passed_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 2;
    private long expiresAt_;
    /// <summary>
    /// for returnable: rtn this value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "enforced_group" field.</summary>
    public const int EnforcedGroupFieldNumber = 3;
    private string enforcedGroup_ = "";
    /// <summary>
    /// events:pageview:homepage:123123
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnforcedGroup {
      get { return enforcedGroup_; }
      set {
        enforcedGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_bucket" field.</summary>
    public const int CurrentBucketFieldNumber = 4;
    private long currentBucket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentBucket {
      get { return currentBucket_; }
      set {
        currentBucket_ = value;
      }
    }

    /// <summary>Field number for the "policy_group" field.</summary>
    public const int PolicyGroupFieldNumber = 5;
    private string policyGroup_ = "";
    /// <summary>
    /// events:pageview
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PolicyGroup {
      get { return policyGroup_; }
      set {
        policyGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "policy_name" field.</summary>
    public const int PolicyNameFieldNumber = 6;
    private global::Prefab.LimitResponse.Types.LimitPolicyNames policyName_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prefab.LimitResponse.Types.LimitPolicyNames PolicyName {
      get { return policyName_; }
      set {
        policyName_ = value;
      }
    }

    /// <summary>Field number for the "policy_limit" field.</summary>
    public const int PolicyLimitFieldNumber = 7;
    private int policyLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PolicyLimit {
      get { return policyLimit_; }
      set {
        policyLimit_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 8;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "limit_reset_at" field.</summary>
    public const int LimitResetAtFieldNumber = 9;
    private long limitResetAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LimitResetAt {
      get { return limitResetAt_; }
      set {
        limitResetAt_ = value;
      }
    }

    /// <summary>Field number for the "safety_level" field.</summary>
    public const int SafetyLevelFieldNumber = 10;
    private global::Prefab.LimitDefinition.Types.SafetyLevel safetyLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prefab.LimitDefinition.Types.SafetyLevel SafetyLevel {
      get { return safetyLevel_; }
      set {
        safetyLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LimitResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LimitResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passed != other.Passed) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (EnforcedGroup != other.EnforcedGroup) return false;
      if (CurrentBucket != other.CurrentBucket) return false;
      if (PolicyGroup != other.PolicyGroup) return false;
      if (PolicyName != other.PolicyName) return false;
      if (PolicyLimit != other.PolicyLimit) return false;
      if (Amount != other.Amount) return false;
      if (LimitResetAt != other.LimitResetAt) return false;
      if (SafetyLevel != other.SafetyLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passed != false) hash ^= Passed.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (EnforcedGroup.Length != 0) hash ^= EnforcedGroup.GetHashCode();
      if (CurrentBucket != 0L) hash ^= CurrentBucket.GetHashCode();
      if (PolicyGroup.Length != 0) hash ^= PolicyGroup.GetHashCode();
      if (PolicyName != 0) hash ^= PolicyName.GetHashCode();
      if (PolicyLimit != 0) hash ^= PolicyLimit.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (LimitResetAt != 0L) hash ^= LimitResetAt.GetHashCode();
      if (SafetyLevel != 0) hash ^= SafetyLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Passed);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpiresAt);
      }
      if (EnforcedGroup.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EnforcedGroup);
      }
      if (CurrentBucket != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurrentBucket);
      }
      if (PolicyGroup.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PolicyGroup);
      }
      if (PolicyName != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PolicyName);
      }
      if (PolicyLimit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PolicyLimit);
      }
      if (Amount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Amount);
      }
      if (LimitResetAt != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LimitResetAt);
      }
      if (SafetyLevel != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SafetyLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passed != false) {
        size += 1 + 1;
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (EnforcedGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnforcedGroup);
      }
      if (CurrentBucket != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentBucket);
      }
      if (PolicyGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PolicyGroup);
      }
      if (PolicyName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PolicyName);
      }
      if (PolicyLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PolicyLimit);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (LimitResetAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimitResetAt);
      }
      if (SafetyLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SafetyLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LimitResponse other) {
      if (other == null) {
        return;
      }
      if (other.Passed != false) {
        Passed = other.Passed;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.EnforcedGroup.Length != 0) {
        EnforcedGroup = other.EnforcedGroup;
      }
      if (other.CurrentBucket != 0L) {
        CurrentBucket = other.CurrentBucket;
      }
      if (other.PolicyGroup.Length != 0) {
        PolicyGroup = other.PolicyGroup;
      }
      if (other.PolicyName != 0) {
        PolicyName = other.PolicyName;
      }
      if (other.PolicyLimit != 0) {
        PolicyLimit = other.PolicyLimit;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.LimitResetAt != 0L) {
        LimitResetAt = other.LimitResetAt;
      }
      if (other.SafetyLevel != 0) {
        SafetyLevel = other.SafetyLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Passed = input.ReadBool();
            break;
          }
          case 16: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 26: {
            EnforcedGroup = input.ReadString();
            break;
          }
          case 32: {
            CurrentBucket = input.ReadInt64();
            break;
          }
          case 42: {
            PolicyGroup = input.ReadString();
            break;
          }
          case 48: {
            policyName_ = (global::Prefab.LimitResponse.Types.LimitPolicyNames) input.ReadEnum();
            break;
          }
          case 56: {
            PolicyLimit = input.ReadInt32();
            break;
          }
          case 64: {
            Amount = input.ReadInt64();
            break;
          }
          case 72: {
            LimitResetAt = input.ReadInt64();
            break;
          }
          case 80: {
            safetyLevel_ = (global::Prefab.LimitDefinition.Types.SafetyLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LimitResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LimitPolicyNames {
        [pbr::OriginalName("NOT_SET")] NotSet = 0,
        [pbr::OriginalName("SECONDLY_ROLLING")] SecondlyRolling = 1,
        [pbr::OriginalName("MINUTELY_ROLLING")] MinutelyRolling = 3,
        [pbr::OriginalName("HOURLY_ROLLING")] HourlyRolling = 5,
        [pbr::OriginalName("DAILY_ROLLING")] DailyRolling = 7,
        [pbr::OriginalName("MONTHLY_ROLLING")] MonthlyRolling = 8,
        [pbr::OriginalName("INFINITE")] Infinite = 9,
        [pbr::OriginalName("YEARLY_ROLLING")] YearlyRolling = 10,
      }

    }
    #endregion

  }

  public sealed partial class LimitRequest : pb::IMessage<LimitRequest> {
    private static readonly pb::MessageParser<LimitRequest> _parser = new pb::MessageParser<LimitRequest>(() => new LimitRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LimitRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitRequest(LimitRequest other) : this() {
      accountId_ = other.accountId_;
      acquireAmount_ = other.acquireAmount_;
      groups_ = other.groups_.Clone();
      limitCombiner_ = other.limitCombiner_;
      allowPartialResponse_ = other.allowPartialResponse_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitRequest Clone() {
      return new LimitRequest(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "acquire_amount" field.</summary>
    public const int AcquireAmountFieldNumber = 2;
    private int acquireAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AcquireAmount {
      get { return acquireAmount_; }
      set {
        acquireAmount_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_groups_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> groups_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "limit_combiner" field.</summary>
    public const int LimitCombinerFieldNumber = 4;
    private global::Prefab.LimitRequest.Types.LimitCombiner limitCombiner_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prefab.LimitRequest.Types.LimitCombiner LimitCombiner {
      get { return limitCombiner_; }
      set {
        limitCombiner_ = value;
      }
    }

    /// <summary>Field number for the "allow_partial_response" field.</summary>
    public const int AllowPartialResponseFieldNumber = 5;
    private bool allowPartialResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowPartialResponse {
      get { return allowPartialResponse_; }
      set {
        allowPartialResponse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LimitRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LimitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (AcquireAmount != other.AcquireAmount) return false;
      if(!groups_.Equals(other.groups_)) return false;
      if (LimitCombiner != other.LimitCombiner) return false;
      if (AllowPartialResponse != other.AllowPartialResponse) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (AcquireAmount != 0) hash ^= AcquireAmount.GetHashCode();
      hash ^= groups_.GetHashCode();
      if (LimitCombiner != 0) hash ^= LimitCombiner.GetHashCode();
      if (AllowPartialResponse != false) hash ^= AllowPartialResponse.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (AcquireAmount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AcquireAmount);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
      if (LimitCombiner != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LimitCombiner);
      }
      if (AllowPartialResponse != false) {
        output.WriteRawTag(40);
        output.WriteBool(AllowPartialResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (AcquireAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AcquireAmount);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      if (LimitCombiner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LimitCombiner);
      }
      if (AllowPartialResponse != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LimitRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.AcquireAmount != 0) {
        AcquireAmount = other.AcquireAmount;
      }
      groups_.Add(other.groups_);
      if (other.LimitCombiner != 0) {
        LimitCombiner = other.LimitCombiner;
      }
      if (other.AllowPartialResponse != false) {
        AllowPartialResponse = other.AllowPartialResponse;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 16: {
            AcquireAmount = input.ReadInt32();
            break;
          }
          case 26: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 32: {
            limitCombiner_ = (global::Prefab.LimitRequest.Types.LimitCombiner) input.ReadEnum();
            break;
          }
          case 40: {
            AllowPartialResponse = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LimitRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LimitCombiner {
        [pbr::OriginalName("NOT_SET")] NotSet = 0,
        [pbr::OriginalName("MINIMUM")] Minimum = 1,
        [pbr::OriginalName("MAXIMUM")] Maximum = 2,
      }

    }
    #endregion

  }

  public sealed partial class FeatureFlag : pb::IMessage<FeatureFlag> {
    private static readonly pb::MessageParser<FeatureFlag> _parser = new pb::MessageParser<FeatureFlag>(() => new FeatureFlag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureFlag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlag(FeatureFlag other) : this() {
      feature_ = other.feature_;
      pct_ = other.pct_;
      whitelisted_ = other.whitelisted_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlag Clone() {
      return new FeatureFlag(this);
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 2;
    private string feature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Feature {
      get { return feature_; }
      set {
        feature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pct" field.</summary>
    public const int PctFieldNumber = 3;
    private double pct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pct {
      get { return pct_; }
      set {
        pct_ = value;
      }
    }

    /// <summary>Field number for the "whitelisted" field.</summary>
    public const int WhitelistedFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_whitelisted_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> whitelisted_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Whitelisted {
      get { return whitelisted_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureFlag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureFlag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Feature != other.Feature) return false;
      if (Pct != other.Pct) return false;
      if(!whitelisted_.Equals(other.whitelisted_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Feature.Length != 0) hash ^= Feature.GetHashCode();
      if (Pct != 0D) hash ^= Pct.GetHashCode();
      hash ^= whitelisted_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Feature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Feature);
      }
      if (Pct != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Pct);
      }
      whitelisted_.WriteTo(output, _repeated_whitelisted_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Feature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Feature);
      }
      if (Pct != 0D) {
        size += 1 + 8;
      }
      size += whitelisted_.CalculateSize(_repeated_whitelisted_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureFlag other) {
      if (other == null) {
        return;
      }
      if (other.Feature.Length != 0) {
        Feature = other.Feature;
      }
      if (other.Pct != 0D) {
        Pct = other.Pct;
      }
      whitelisted_.Add(other.whitelisted_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Feature = input.ReadString();
            break;
          }
          case 25: {
            Pct = input.ReadDouble();
            break;
          }
          case 34: {
            whitelisted_.AddEntriesFrom(input, _repeated_whitelisted_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LimitDefinition : pb::IMessage<LimitDefinition> {
    private static readonly pb::MessageParser<LimitDefinition> _parser = new pb::MessageParser<LimitDefinition>(() => new LimitDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LimitDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitDefinition(LimitDefinition other) : this() {
      group_ = other.group_;
      policyName_ = other.policyName_;
      limit_ = other.limit_;
      burst_ = other.burst_;
      accountId_ = other.accountId_;
      lastModified_ = other.lastModified_;
      returnable_ = other.returnable_;
      safetyLevel_ = other.safetyLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitDefinition Clone() {
      return new LimitDefinition(this);
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 1;
    private string group_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Group {
      get { return group_; }
      set {
        group_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "policy_name" field.</summary>
    public const int PolicyNameFieldNumber = 2;
    private global::Prefab.LimitResponse.Types.LimitPolicyNames policyName_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prefab.LimitResponse.Types.LimitPolicyNames PolicyName {
      get { return policyName_; }
      set {
        policyName_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "burst" field.</summary>
    public const int BurstFieldNumber = 4;
    private int burst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Burst {
      get { return burst_; }
      set {
        burst_ = value;
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 5;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "last_modified" field.</summary>
    public const int LastModifiedFieldNumber = 6;
    private long lastModified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastModified {
      get { return lastModified_; }
      set {
        lastModified_ = value;
      }
    }

    /// <summary>Field number for the "returnable" field.</summary>
    public const int ReturnableFieldNumber = 7;
    private bool returnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Returnable {
      get { return returnable_; }
      set {
        returnable_ = value;
      }
    }

    /// <summary>Field number for the "safety_level" field.</summary>
    public const int SafetyLevelFieldNumber = 8;
    private global::Prefab.LimitDefinition.Types.SafetyLevel safetyLevel_ = 0;
    /// <summary>
    /// [default = L4_BEST_EFFORT];
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prefab.LimitDefinition.Types.SafetyLevel SafetyLevel {
      get { return safetyLevel_; }
      set {
        safetyLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LimitDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LimitDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Group != other.Group) return false;
      if (PolicyName != other.PolicyName) return false;
      if (Limit != other.Limit) return false;
      if (Burst != other.Burst) return false;
      if (AccountId != other.AccountId) return false;
      if (LastModified != other.LastModified) return false;
      if (Returnable != other.Returnable) return false;
      if (SafetyLevel != other.SafetyLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Group.Length != 0) hash ^= Group.GetHashCode();
      if (PolicyName != 0) hash ^= PolicyName.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (Burst != 0) hash ^= Burst.GetHashCode();
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (LastModified != 0L) hash ^= LastModified.GetHashCode();
      if (Returnable != false) hash ^= Returnable.GetHashCode();
      if (SafetyLevel != 0) hash ^= SafetyLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Group.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Group);
      }
      if (PolicyName != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PolicyName);
      }
      if (Limit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Limit);
      }
      if (Burst != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Burst);
      }
      if (AccountId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AccountId);
      }
      if (LastModified != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastModified);
      }
      if (Returnable != false) {
        output.WriteRawTag(56);
        output.WriteBool(Returnable);
      }
      if (SafetyLevel != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SafetyLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Group.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Group);
      }
      if (PolicyName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PolicyName);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (Burst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Burst);
      }
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (LastModified != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModified);
      }
      if (Returnable != false) {
        size += 1 + 1;
      }
      if (SafetyLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SafetyLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LimitDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Group.Length != 0) {
        Group = other.Group;
      }
      if (other.PolicyName != 0) {
        PolicyName = other.PolicyName;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.Burst != 0) {
        Burst = other.Burst;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.LastModified != 0L) {
        LastModified = other.LastModified;
      }
      if (other.Returnable != false) {
        Returnable = other.Returnable;
      }
      if (other.SafetyLevel != 0) {
        SafetyLevel = other.SafetyLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Group = input.ReadString();
            break;
          }
          case 16: {
            policyName_ = (global::Prefab.LimitResponse.Types.LimitPolicyNames) input.ReadEnum();
            break;
          }
          case 24: {
            Limit = input.ReadInt32();
            break;
          }
          case 32: {
            Burst = input.ReadInt32();
            break;
          }
          case 40: {
            AccountId = input.ReadInt64();
            break;
          }
          case 48: {
            LastModified = input.ReadInt64();
            break;
          }
          case 56: {
            Returnable = input.ReadBool();
            break;
          }
          case 64: {
            safetyLevel_ = (global::Prefab.LimitDefinition.Types.SafetyLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LimitDefinition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SafetyLevel {
        [pbr::OriginalName("NOT_SET")] NotSet = 0,
        [pbr::OriginalName("L4_BEST_EFFORT")] L4BestEffort = 4,
        [pbr::OriginalName("L5_BOMBPROOF")] L5Bombproof = 5,
      }

    }
    #endregion

  }

  public sealed partial class LimitDefinitions : pb::IMessage<LimitDefinitions> {
    private static readonly pb::MessageParser<LimitDefinitions> _parser = new pb::MessageParser<LimitDefinitions>(() => new LimitDefinitions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LimitDefinitions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitDefinitions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitDefinitions(LimitDefinitions other) : this() {
      definitions_ = other.definitions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitDefinitions Clone() {
      return new LimitDefinitions(this);
    }

    /// <summary>Field number for the "definitions" field.</summary>
    public const int DefinitionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Prefab.LimitDefinition> _repeated_definitions_codec
        = pb::FieldCodec.ForMessage(10, global::Prefab.LimitDefinition.Parser);
    private readonly pbc::RepeatedField<global::Prefab.LimitDefinition> definitions_ = new pbc::RepeatedField<global::Prefab.LimitDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prefab.LimitDefinition> Definitions {
      get { return definitions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LimitDefinitions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LimitDefinitions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!definitions_.Equals(other.definitions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= definitions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      definitions_.WriteTo(output, _repeated_definitions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += definitions_.CalculateSize(_repeated_definitions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LimitDefinitions other) {
      if (other == null) {
        return;
      }
      definitions_.Add(other.definitions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            definitions_.AddEntriesFrom(input, _repeated_definitions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeatureFlags : pb::IMessage<FeatureFlags> {
    private static readonly pb::MessageParser<FeatureFlags> _parser = new pb::MessageParser<FeatureFlags>(() => new FeatureFlags());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureFlags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlags(FeatureFlags other) : this() {
      flags_ = other.flags_.Clone();
      cacheExpiry_ = other.cacheExpiry_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlags Clone() {
      return new FeatureFlags(this);
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Prefab.FeatureFlag> _repeated_flags_codec
        = pb::FieldCodec.ForMessage(10, global::Prefab.FeatureFlag.Parser);
    private readonly pbc::RepeatedField<global::Prefab.FeatureFlag> flags_ = new pbc::RepeatedField<global::Prefab.FeatureFlag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prefab.FeatureFlag> Flags {
      get { return flags_; }
    }

    /// <summary>Field number for the "cache_expiry" field.</summary>
    public const int CacheExpiryFieldNumber = 2;
    private long cacheExpiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CacheExpiry {
      get { return cacheExpiry_; }
      set {
        cacheExpiry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureFlags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureFlags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!flags_.Equals(other.flags_)) return false;
      if (CacheExpiry != other.CacheExpiry) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= flags_.GetHashCode();
      if (CacheExpiry != 0L) hash ^= CacheExpiry.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      flags_.WriteTo(output, _repeated_flags_codec);
      if (CacheExpiry != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CacheExpiry);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += flags_.CalculateSize(_repeated_flags_codec);
      if (CacheExpiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CacheExpiry);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureFlags other) {
      if (other == null) {
        return;
      }
      flags_.Add(other.flags_);
      if (other.CacheExpiry != 0L) {
        CacheExpiry = other.CacheExpiry;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            flags_.AddEntriesFrom(input, _repeated_flags_codec);
            break;
          }
          case 16: {
            CacheExpiry = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BufferedRequest : pb::IMessage<BufferedRequest> {
    private static readonly pb::MessageParser<BufferedRequest> _parser = new pb::MessageParser<BufferedRequest>(() => new BufferedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferedRequest(BufferedRequest other) : this() {
      accountId_ = other.accountId_;
      method_ = other.method_;
      uri_ = other.uri_;
      body_ = other.body_;
      limitGroups_ = other.limitGroups_.Clone();
      contentType_ = other.contentType_;
      fifo_ = other.fifo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferedRequest Clone() {
      return new BufferedRequest(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 2;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 3;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 4;
    private string body_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_groups" field.</summary>
    public const int LimitGroupsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_limitGroups_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> limitGroups_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LimitGroups {
      get { return limitGroups_; }
    }

    /// <summary>Field number for the "content_type" field.</summary>
    public const int ContentTypeFieldNumber = 6;
    private string contentType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentType {
      get { return contentType_; }
      set {
        contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fifo" field.</summary>
    public const int FifoFieldNumber = 7;
    private bool fifo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fifo {
      get { return fifo_; }
      set {
        fifo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Method != other.Method) return false;
      if (Uri != other.Uri) return false;
      if (Body != other.Body) return false;
      if(!limitGroups_.Equals(other.limitGroups_)) return false;
      if (ContentType != other.ContentType) return false;
      if (Fifo != other.Fifo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      hash ^= limitGroups_.GetHashCode();
      if (ContentType.Length != 0) hash ^= ContentType.GetHashCode();
      if (Fifo != false) hash ^= Fifo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Method);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Uri);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Body);
      }
      limitGroups_.WriteTo(output, _repeated_limitGroups_codec);
      if (ContentType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ContentType);
      }
      if (Fifo != false) {
        output.WriteRawTag(56);
        output.WriteBool(Fifo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      size += limitGroups_.CalculateSize(_repeated_limitGroups_codec);
      if (ContentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
      }
      if (Fifo != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferedRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      limitGroups_.Add(other.limitGroups_);
      if (other.ContentType.Length != 0) {
        ContentType = other.ContentType;
      }
      if (other.Fifo != false) {
        Fifo = other.Fifo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 18: {
            Method = input.ReadString();
            break;
          }
          case 26: {
            Uri = input.ReadString();
            break;
          }
          case 34: {
            Body = input.ReadString();
            break;
          }
          case 42: {
            limitGroups_.AddEntriesFrom(input, _repeated_limitGroups_codec);
            break;
          }
          case 50: {
            ContentType = input.ReadString();
            break;
          }
          case 56: {
            Fifo = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchRequest : pb::IMessage<BatchRequest> {
    private static readonly pb::MessageParser<BatchRequest> _parser = new pb::MessageParser<BatchRequest>(() => new BatchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prefab.PrefabReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRequest(BatchRequest other) : this() {
      accountId_ = other.accountId_;
      method_ = other.method_;
      uri_ = other.uri_;
      body_ = other.body_;
      limitGroups_ = other.limitGroups_.Clone();
      batchTemplate_ = other.batchTemplate_;
      batchSeparator_ = other.batchSeparator_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRequest Clone() {
      return new BatchRequest(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 2;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 3;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 4;
    private string body_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_groups" field.</summary>
    public const int LimitGroupsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_limitGroups_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> limitGroups_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LimitGroups {
      get { return limitGroups_; }
    }

    /// <summary>Field number for the "batch_template" field.</summary>
    public const int BatchTemplateFieldNumber = 6;
    private string batchTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchTemplate {
      get { return batchTemplate_; }
      set {
        batchTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batch_separator" field.</summary>
    public const int BatchSeparatorFieldNumber = 7;
    private string batchSeparator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchSeparator {
      get { return batchSeparator_; }
      set {
        batchSeparator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Method != other.Method) return false;
      if (Uri != other.Uri) return false;
      if (Body != other.Body) return false;
      if(!limitGroups_.Equals(other.limitGroups_)) return false;
      if (BatchTemplate != other.BatchTemplate) return false;
      if (BatchSeparator != other.BatchSeparator) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      hash ^= limitGroups_.GetHashCode();
      if (BatchTemplate.Length != 0) hash ^= BatchTemplate.GetHashCode();
      if (BatchSeparator.Length != 0) hash ^= BatchSeparator.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountId);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Method);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Uri);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Body);
      }
      limitGroups_.WriteTo(output, _repeated_limitGroups_codec);
      if (BatchTemplate.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BatchTemplate);
      }
      if (BatchSeparator.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BatchSeparator);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      size += limitGroups_.CalculateSize(_repeated_limitGroups_codec);
      if (BatchTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchTemplate);
      }
      if (BatchSeparator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchSeparator);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      limitGroups_.Add(other.limitGroups_);
      if (other.BatchTemplate.Length != 0) {
        BatchTemplate = other.BatchTemplate;
      }
      if (other.BatchSeparator.Length != 0) {
        BatchSeparator = other.BatchSeparator;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt64();
            break;
          }
          case 18: {
            Method = input.ReadString();
            break;
          }
          case 26: {
            Uri = input.ReadString();
            break;
          }
          case 34: {
            Body = input.ReadString();
            break;
          }
          case 42: {
            limitGroups_.AddEntriesFrom(input, _repeated_limitGroups_codec);
            break;
          }
          case 50: {
            BatchTemplate = input.ReadString();
            break;
          }
          case 58: {
            BatchSeparator = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
